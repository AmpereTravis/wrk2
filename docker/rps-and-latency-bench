#!/bin/ash
#
# Wrapper script around wrk service mesh benchmark
#

conn=10
rps=10
dur=60
pgw="http://pushgateway.monitoring:9091/metrics/job/wrk2_benchmark/instance/test_run"

[ -z "$1" -o "help" = "$1" -o "-h" = "$1" -o "--help" = "$1" ] && {
    echo "Usage:"
    echo "  docker run -ti quay.io/kinvolk/wrk2-srvmesh-bench \\" 
    echo "        [-c <num-of-concurrent-connections>] \\"
    echo "        [-r <num-of-requests-per-second>] \\"
    echo "        [-d <duration>] \\"
    echo "        [-p <push-gateway>] \\"
    echo "        [-T ] \\"
    echo "     http[s]://>service-1>/<endpoint-1> \\"
    echo "     http[s]://>service-1>/<endpoint-2> \\"
    echo "     http[s]://>service-2>/<endpoint-1> \\"
    echo "     http[s]://>service-2>/<endpoint-2> \\"
    echo "        ..."
    echo
    echo " -c <connections> - Number of concurrent connections. Default: $conn"
    echo " -r <rps> - Target rate of requests per second. Default: $rps"
    echo " -d <duration> - Test duration in seconds. Default: $dur"
    echo " -p <push-gateway> - URL of prometheus push gateway. Default: $pgw"
    echo "                     Use 'stdout' to just print to standard output."
    echo " -T - Report individual connections' stats during run. Default: off."
    echo
    exit
}

servers=""
per_thread_stats=0

i=1; next=""
for arg do
    [ "$arg" = "-c" ] &&  { next="conn"; continue; }
    [ "$arg" = "-r" ] &&  { next="rps"; continue; }
    [ "$arg" = "-d" ] &&  { next="dur"; continue; }
    [ "$arg" = "-p" ] &&  { next="pgw"; continue; }
    [ "$arg" = "-T" ] &&  { [ -n "$next" ] && { echo "$next: Missing argument";
                                                exit 1; }
                            per_thread_stats=1; continue; }

    [ -n "$next" ] && { eval $next="$arg"; next=""; continue; }

    servers="$servers $arg"
done

if [ "$pgw" = "stdout" ] ; then
    curl_pgw="cat -"
else
    curl_pgw="curl --data-binary @- $pgw"
fi
export curl_pgw

duration_mul=$(echo "$dur" \
                   | awk '/s$/{print "1"} /m$/{print "60"} /h$/{print "3600"}')
[ -z "$duration_mul" ] && duration_mul=1
duration_val=$(echo "$dur" | sed 's/[^0-9]\+//g')
duration_s=$(( $duration_val * $duration_mul ))

echo
echo "Running stresser with:"
echo "   conn: $conn"
echo "   rps: $rps"
echo "   duration: $dur ($duration_s s)"
echo "   prometheus push-gateway: $pgw"
echo "   servers: $servers"
echo

sleep 1

unbuffer /usr/local/bin/wrk \
              -s /usr/local/bin/multiple-endpoints-prometheus-metrics.lua \
              --lua-dont-pass-body \
              -L -R "$rps" -c "$conn" -t "$conn" -d "$dur" \
              $servers \
    | unbuffer -p tee stats \
    | awk -v threads="$conn" \
          -v per_thread_stats="$per_thread_stats" \
          -v rrps="$rps"  \
          -v duration="$duration_s" '

           BEGIN{
                start_ts=systime()
                system("cat << EOF | $curl_pgw\n" \
                   "# TYPE wrk2_benchmark_progress counter\n" \
                   "wrk2_benchmark_progress " 0 "\n" \
                   "EOF")
           }

           /^wrk2_benchmark_/ {
                # due to multithreading there can be more than one value per line
                num_values = gsub(/ [0-9]+/," &\n")
                if (0 < per_thread_stats) {
                    lines = gensub(/[^0-9]$/,"","g")
                    per_thread_info = per_thread_info lines
                }

                c=c+num_values
                if (c >= threads * 4) {
                    runtime=systime() - start_ts
                    cmd = "cat << EOF | $curl_pgw\n" \
                       "# TYPE wrk2_benchmark_requests counter\n" \
                       "# TYPE wrk2_benchmark_responses counter\n" \
                       "# TYPE wrk2_benchmark_average_rps gauge\n" \
                       "# TYPE wrk2_benchmark_run_average_rps gauge\n" \
                       "# TYPE wrk2_benchmark_current_rps gauge\n" \
                       "# TYPE wrk2_benchmark_run_requested_rps gauge\n" \
                       "# TYPE wrk2_benchmark_progress counter\n" \
                       per_thread_info \
                       "wrk2_benchmark_requests{label=\"sum\"} " req "\n" \
                       "wrk2_benchmark_responses{label=\"sum\"} " resp "\n" \
                       "wrk2_benchmark_average_rps{label=\"sum\"} " avg "\n" \
                       "wrk2_benchmark_current_rps{label=\"sum\"} " curr "\n" \
                       "wrk2_benchmark_run_average_rps{label=\"sum\"} " avg "\n" \
                       "wrk2_benchmark_run_requested_rps{label=\"sum\"} " rrps "\n" \
                       "wrk2_benchmark_progress " runtime * 100 / duration "\n" \
                       "EOF"
                    print "-----------"
                    print "CMD: " cmd
                    print "-----------"
                    system(cmd)
                    c=0; req=0; avg=0; resp=0; curr=0; per_thread_info=""
                }
            }

           /^wrk2_benchmark_requests/    { req  = req  + $2 }
           /^wrk2_benchmark_responses/   { resp = resp + $2 }
           /^wrk2_benchmark_average_rps/ { avg  = avg  + $2 }
           /^wrk2_benchmark_current_rps/ { curr = curr + $2 }
        '

# set sum gauges to 0, progress to 100
per_thread_info=""
if [ 0 -lt $per_thread_stats ] ; then
    for i in $(seq $conn); do
        per_thread_info="wrk2_benchmark_requests{label=\"thread-${i}\"} 0\n$per_thread_info"
        per_thread_info="wrk2_benchmark_responses{label=\"thread-${i}\"} 0\n$per_thread_info"
        per_thread_info="wrk2_benchmark_average_rps{label=\"thread-${i}\"} 0\n$per_thread_info"
        per_thread_info="wrk2_benchmark_current_rps{label=\"thread-${i}\"} 0\n$per_thread_info"
    done
fi

cat << EOF | $curl_pgw
# TYPE wrk2_benchmark_progress counter
# TYPE wrk2_benchmark_requests counter
# TYPE wrk2_benchmark_responses counter
# TYPE wrk2_benchmark_average_rps gauge
# TYPE wrk2_benchmark_current_rps gauge
$(echo -e $per_thread_info)
wrk2_benchmark_average_rps{label="sum"} 0
wrk2_benchmark_current_rps{label="sum"} 0
wrk2_benchmark_progress 100
EOF

grep -A 99999 'Latency Distribution' stats

cat << EOF | $curl_pgw
# TYPE wrk2_benchmark_progress counter
wrk2_benchmark_progress 100
EOF

